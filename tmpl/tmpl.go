// Code generated by /tools/tmpl.go. DO NOT EDIT
package tmpl

/*
If you want to edit the templates directly, you can do so in
under tmpl/_gotemplate
The templates are maintained there for greater readability.
*/

// MapTmpl contains all the necessary data to generate a carto map
type MapTmpl struct {
	GenDate          string
	PackageName      string
	StructName       string
	KeyTypePackage   string
	KeyType          string
	ValueType        string
	ValueTypePackage string
	ReceiverName     string
	GetReturnsBool   bool
	LazyInstantiates bool
	GetDefault       bool
}

// HeadTmpl is the file header, including imports and struct declaration.
// If lazy map instantiation is _not_ enabled, this also wraps the New... func.
const HeadTmpl = `// Code generated {{.GenDate}} by carto.  DO NOT EDIT.
package {{.PackageName}}
import (
	"sync"

{{if .KeyTypePackage}}	"{{.KeyTypePackage}}"
{{end}}{{if .ValueTypePackage}}	"{{.ValueTypePackage}}"
{{end}})

// {{.StructName}} wraps map[{{.KeyType}}]{{.ValueType}}, and locks reads and writes with a mutex
type {{.StructName}} struct {
	mx sync.RWMutex
	impl map[{{.KeyType}}]{{.ValueType}}
{{if .LazyInstantiates}}	onceToken sync.Once
{{end}}
}
{{if .LazyInstantiates}}{{else}}
// New{{.StructName}} generates a new {{.StructName}} with a non-nil map
func New{{.StructName}}() *{{.StructName}} {
	{{.ReceiverName}} := &{{.StructName}}{}
	{{.ReceiverName}}.impl = make(map[{{.KeyType}}]{{.ValueType}})

	return {{.ReceiverName}}
}
{{end}}`

// GetTmpl wraps the `Get` func
const GetTmpl = `{{if .GetDefault}}// Get gets the {{.ValueType}} keyed by {{.KeyType}}.  If the key does not exist, a default {{.ValueType}} will be returned
func ({{.ReceiverName}} *{{.StructName}}) Get(key {{.KeyType}}, dflt {{.ValueType}})(value {{.ValueType}}) {
	{{.ReceiverName}}.mx.RLock()
	defer {{.ReceiverName}}.mx.RUnlock()

	var ok bool
	value, ok = {{.ReceiverName}}.impl[key]
	if !ok {
		value = dflt
	}

	return
}
{{else}}// Get gets the {{.ValueType}} keyed by {{.KeyType}}. {{if .GetReturnsBool}}Also returns bool value indicating whether the key exists in the map{{end}}
func ({{.ReceiverName}} *{{.StructName}}) Get(key {{.KeyType}}) {{if .GetReturnsBool}}(value {{.ValueType}}, ok bool){{else}}(value {{.ValueType}}){{end}} {
	{{.ReceiverName}}.mx.RLock()
	defer {{.ReceiverName}}.mx.RUnlock()

	value{{if .GetReturnsBool}}, ok{{end}} = {{.ReceiverName}}.impl[key]

	return
}
{{end}}`

// KeysTmpl wraps the `Keys` func
const KeysTmpl = `// Keys will return all keys in the {{.StructName}}'s internal map
func ({{.ReceiverName}} *{{.StructName}}) Keys() (keys []{{.KeyType}}) {
	{{.ReceiverName}}.mx.RLock()
	defer {{.ReceiverName}}.mx.RUnlock()

	keys = make([]{{.KeyType}}, len({{.ReceiverName}}.impl))
	var i int
	for k := range {{.ReceiverName}}.impl {
		keys[i] = k
		i++
	}

	return
}
`

// SetTmpl wraps the `Set` func
const SetTmpl = `// Set will add an element to the {{.StructName}}'s internal map with the specified key
func ({{.ReceiverName}} *{{.StructName}}) Set(key {{.KeyType}}, value {{.ValueType}}) {
	{{.ReceiverName}}.mx.Lock()
	defer {{.ReceiverName}}.mx.Unlock()

{{if .LazyInstantiates}}	{{.ReceiverName}}.onceToken.Do(func() {
		{{.ReceiverName}}.impl = make(map[{{.KeyType}}]{{.ValueType}})
	})
{{end}}	{{.ReceiverName}}.impl[key] = value
}
`

// AbsorbTmpl wraps the `Absorb` func
const AbsorbTmpl = `// Absorb will take all the keys and values from another {{.StructName}}'s internal map and
// overwrite any existing keys
func ({{.ReceiverName}} *{{.StructName}}) Absorb(otherMap *{{.StructName}}) {
	{{.ReceiverName}}.mx.Lock()
	otherMap.mx.RLock()
	defer otherMap.mx.RUnlock()
	defer {{.ReceiverName}}.mx.Unlock()

{{if .LazyInstantiates}}	{{.ReceiverName}}.onceToken.Do(func() {
		{{.ReceiverName}}.impl = make(map[{{.KeyType}}]{{.ValueType}})
	})
{{end}}	for k, v := range otherMap.impl {
		{{.ReceiverName}}.impl[k] = v
	}
}
`

// AbsorbMapTmpl wraps the `AbsorbMap` func
const AbsorbMapTmpl = `// AbsorbMap will take all the keys and values from another map and overwrite any existing keys
func ({{.ReceiverName}} *{{.StructName}}) AbsorbMap(regularMap map[{{.KeyType}}]{{.ValueType}}) {
	{{.ReceiverName}}.mx.Lock()
    defer {{.ReceiverName}}.mx.Unlock()

{{if .LazyInstantiates}}	{{.ReceiverName}}.onceToken.Do(func() {
		{{.ReceiverName}}.impl = make(map[{{.KeyType}}]{{.ValueType}})
	})
{{end}}	for k, v := range regularMap {
		{{.ReceiverName}}.impl[k] = v
	}
}
`

// DeleteTmpl wraps the `Delete` func
const DeleteTmpl = `// Delete will remove a {{.ValueType}} from the map by key
func ({{.ReceiverName}} *{{.StructName}}) Delete(key {{.KeyType}}) {
	{{.ReceiverName}}.mx.Lock()
	defer {{.ReceiverName}}.mx.Unlock()

{{if .LazyInstantiates}}    {{.ReceiverName}}.onceToken.Do(func() {
    	{{.ReceiverName}}.impl = make(map[{{.KeyType}}]{{.ValueType}})
	})
{{end}}	delete({{.ReceiverName}}.impl, key)
}
`

// ClearTmpl wraps the `Clear` func
const ClearTmpl = `// Clear will remove all elements from the map
func ({{.ReceiverName}} *{{.StructName}}) Clear() {
	{{.ReceiverName}}.mx.Lock()
	defer {{.ReceiverName}}.mx.Unlock()

	{{.ReceiverName}}.impl = make(map[{{.KeyType}}]{{.ValueType}})
}
`
